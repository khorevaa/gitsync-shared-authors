
#Использовать logos
#Использовать 1connector
#Использовать configor

Перем Лог;
Перем Обработчик;
Перем КомандыПлагина;
Перем ПриоритетЗаполнения;
Перем ПутьКФайлу;
Перем URLПолученияФайла;
Перем ПеречислениеПриоритетЗаполнения;
Перем ПеречислениеТипыСодержания;
Перем ТипСодержания;
Перем ПользовательURL;
Перем ПарольПользовательURL;

Перем ДанныеАвторов;

#Область Интерфейс_плагина

// Возвращает версию плагина
//
//  Возвращаемое значение:
//   Строка - текущая версия плагина
//
Функция Версия() Экспорт
	Возврат "0.1.0";
КонецФункции

// Возвращает приоритет выполнения плагина
//
//  Возвращаемое значение:
//   Число - приоритет выполнения плагина
//
Функция Приоритет() Экспорт
	Возврат 0;
КонецФункции

// Возвращает описание плагина
//
//  Возвращаемое значение:
//   Строка - описание функциональности плагина
//
Функция Описание() Экспорт
	Возврат "Плагин добавляет возможность получения общего списка авторов для нескольких репозиторием";
КонецФункции

// Возвращает подробную справку к плагину 
//
//  Возвращаемое значение:
//   Строка - подробная справка для плагина
//
Функция Справка() Экспорт
	Возврат "Плагин добавляет возможность получения общего списка авторов для нескольких репозиторием";
КонецФункции

// Возвращает имя плагина
//
//  Возвращаемое значение:
//   Строка - имя плагина при подключении
//
Функция Имя() Экспорт
	Возврат "shared-authors";
КонецФункции 

// Возвращает имя лога плагина
//
//  Возвращаемое значение:
//   Строка - имя лога плагина
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.gitsync.plugins.shared-authors";
КонецФункции

#КонецОбласти

#Область Подписки_на_события

Процедура ПриАктивизации(СтандартныйОбработчик) Экспорт

	Обработчик = СтандартныйОбработчик;

КонецПроцедуры

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КомандаПриложения) Экспорт

	Лог.Отладка("Ищю команду <%1> в списке поддерживаемых", ИмяКоманды);
	Если КомандыПлагина.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Устанавливаю дополнительные параметры для команды %1", ИмяКоманды);

	КомандаПриложения.Опция("authors-file", "", СтрШаблон("[*shared-authors] путь к файлу авторов"));
	КомандаПриложения.Опция("authors-url", "", СтрШаблон("[*shared-authors] url для получения файла авторов"));
	КомандаПриложения.Опция("authors-url-user ", "", СтрШаблон("[*shared-authors] пользователь при подключении к url"));
	КомандаПриложения.Опция("authors-url-password authors-url-pwd", "", СтрШаблон("[*shared-authors] пароль пользователя при подключении к url"));
	
	КомандаПриложения.Опция("authors-type", ПеречислениеТипыСодержания.АвтоматическоеОпределение, СтрШаблон("[*shared-authors] тип содержания файла авторов"))
							.ТПеречисление()
							.Перечисление(ПеречислениеТипыСодержания.АвтоматическоеОпределение, ПеречислениеТипыСодержания.АвтоматическоеОпределение, "автоматическое определение формата данных")
							.Перечисление(ПеречислениеТипыСодержания.Json, ПеречислениеТипыСодержания.Json, "данные в формате json")
							.Перечисление(ПеречислениеТипыСодержания.Текст, ПеречислениеТипыСодержания.Текст, "данные в формате текста")
							;

	КомандаПриложения.Опция("authors-priority", ПеречислениеПриоритетЗаполнения.Проект, СтрШаблон("[*shared-authors] приоритет заполнения данных в таблице авторов"))
						.ТПеречисление()
						.Перечисление(ПеречислениеПриоритетЗаполнения.Проект, ПеречислениеПриоритетЗаполнения.Проект, "приоритет заполнения данных из рабочего каталога проекта")
						.Перечисление(ПеречислениеПриоритетЗаполнения.ОбщиеАвторы, ПеречислениеПриоритетЗаполнения.ОбщиеАвторы, "приоритет заполнения данных из общего списка авторов")
						.Перечисление(ПеречислениеПриоритетЗаполнения.ТолькоОбщиеАвторы, ПеречислениеПриоритетЗаполнения.ТолькоОбщиеАвторы, "использование только данных из общего списка авторов");

КонецПроцедуры

Процедура ПриПолученииПараметров(ПараметрыКоманды) Экспорт

	ПриоритетЗаполнения = ПараметрыКоманды.Параметр("authors-priority", ПеречислениеПриоритетЗаполнения.Проект);
	ПутьКФайлу = ПараметрыКоманды.Параметр("authors-file", "");
	URLПолученияФайла = ПараметрыКоманды.Параметр("authors-url", "");
	ПользовательURL = ПараметрыКоманды.Параметр("authors-url-user", "");
	ПарольПользовательURL = ПараметрыКоманды.Параметр("authors-url-passwordl", "");
	ТипСодержания = ПараметрыКоманды.Параметр("authors-type", ПеречислениеТипыСодержания.АвтоматическоеОпределение);

	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Лог.Информация("Установлен общий список авторов из файла <%1>", ПутьКФайлу);
	КонецЕсли;

	Если ЗначениеЗаполнено(URLПолученияФайла) Тогда
		Лог.Информация("Установлен URL общего списока авторов <%1>", URLПолученияФайла);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьКФайлу)
		ИЛИ ЗначениеЗаполнено(URLПолученияФайла) Тогда
		Лог.Информация("Установлен приоритет общего списока авторов <%1>", ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при получении таблицы авторов
//
// Параметры:
//   ПутьКФайлуАвторов - Строка - полный путь к хранилищу конфигурации 
//   ТаблицаАвторов - ТаблицаЗначений - инициализированная таблица с колонками:
//     * Автор               - Строка - имя автора версии в хранилище 
//     * ПредставлениеАвтора - Строка - представление автора для коммита в git
//   СтандартнаяОбработка - Булево - признак отказ от обработки по умолчанию
//
Процедура ПриПолученииТаблицыАвторов(ПутьКФайлуАвторов, ТаблицаАвторов, СтандартнаяОбработка) Экспорт

	ПолучитьДанныеАвторов();

	Если ПриоритетЗаполнения = ПеречислениеПриоритетЗаполнения.ТолькоОбщиеАвторы Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьТаблицуАвторов(ТаблицаАвторов);
	КонецЕсли;

КонецПроцедуры

// Вызывается при получении таблицы авторов
//
// Параметры:
//   ПутьКФайлуАвторов - Строка - полный путь к хранилищу конфигурации 
//   ТаблицаАвторов - ТаблицаЗначений - инициализированная таблица с колонками:
//     * Автор               - Строка - имя автора версии в хранилище 
//     * ПредставлениеАвтора - Строка - представление автора для коммита в git
//
Процедура ПослеПолученияТаблицыАвторов(ПутьКФайлуАвторов, ТаблицаАвторов) Экспорт

	Если ПриоритетЗаполнения = ПеречислениеПриоритетЗаполнения.ТолькоОбщиеАвторы Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТаблицуАвторов(ТаблицаАвторов);

КонецПроцедуры

#КонецОбласти

Процедура ПолучитьДанныеАвторов()
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ПолучитьДанныеАвторовИзФайла(ПутьКФайлу);
	КонецЕсли;

	Если ЗначениеЗаполнено(URLПолученияФайла) Тогда
		ПолучитьДанныеАвторовИзURL(URLПолученияФайла);
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДанныеАвторовИзФайла(ПутьКФайлуАвторов)

	ФайлАвторов = Новый Файл(ПутьКФайлуАвторов);

	Если Не ФайлАвторов.Существует() Тогда
		Возврат;
	КонецЕсли;

	ТекстФайла = ПрочитатьТекстФайла(ФайлАвторов.ПолноеИмя);

	ПрочитатьДанныеАвторов(ТекстФайла);

КонецПроцедуры

Процедура ПрочитатьДанныеАвторов(ТекстФайла)

	ФорматДанныхФайла = ОпределитьФорматДанных(ТекстФайла);

	Если ФорматДанныхФайла = ПеречислениеТипыСодержания.Json Тогда
		
		ПрочитатьАвторовJson(ТекстФайла);
		
	ИначеЕсли ФорматДанныхФайла = ПеречислениеТипыСодержания.Текст Тогда 

		ПрочитатьАвторовОбычныйТекст(ТекстФайла)
	
	Иначе

		ВызватьИсключение "Не поддерживаемый формат данных файла";

	КонецЕсли;

КонецПроцедуры

Функция ОпределитьФорматДанных(ТекстФайла)
	
	ФорматДанныхФайла = ТипСодержания;

	Если ФорматДанныхФайла = ПеречислениеТипыСодержания.АвтоматическоеОпределение Тогда
		
		ЭтоФорматJson = СтрНачинаетсяС(ТекстФайла, "{") 
							ИЛИ СтрНачинаетсяС(ТекстФайла, "["); 

		Если ЭтоФорматJson Тогда
		
			ФорматДанныхФайла = ПеречислениеТипыСодержания.Json;

		Иначе
			ФорматДанныхФайла = ПеречислениеТипыСодержания.Текст;

		КонецЕсли;

	КонецЕсли;

	Возврат ФорматДанныхФайла;

КонецФункции

Функция ПолучитьКонструкторПараметровАвторов()

	КонструкторОписанияАвтора = Новый КонструкторПараметров;
	КонструкторОписанияАвтора.ПолеСтрока("Автор storage-user user", "")
		.ПолеСтрока("ПолноеИмя full-name", "")
		.ПолеСтрока("Емайл email", "")
		.ПолеСтрока("ПредставлениеАвтора description", "")
		;

	КонструкторПараметров = Новый КонструкторПараметров;
	КонструкторПараметров.ПолеМассив("НаборАвторов authors", КонструкторОписанияАвтора)
		;

	Возврат КонструкторПараметров;
	
КонецФункции

Функция ПрочитатьТекстФайла(Знач ПутьКФайлуЧтения)
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуЧтения, "utf-8");
	ТекстФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат ТекстФайла;

КонецФункции

Процедура ПрочитатьАвторовОбычныйТекст(Текст)
	
	МассивСтрокФайла = СтрРазделить(Текст, Символы.ПС, Ложь);

	Для каждого СтрокаФайла Из МассивСтрокФайла Цикл

		Если СтрНачинаетсяС(СокрЛП(СтрокаФайла), "//") Тогда
			Продолжить;
		КонецЕсли;

		МассивКлючей =  СтрРазделить(СтрокаФайла, "=", Ложь);

		Если Не МассивКлючей.Количество() = 2 Тогда
			Лог.Предупреждение("Ошибка чтения файла авторов строка <%1>", СтрокаФайла);
			Продолжить;
		КонецЕсли;

		ОписаниеАвтора = Новый Структура();

		ОписаниеАвтора.Вставить("Автор", СокрЛП(МассивКлючей[0]));
		ОписаниеАвтора.Вставить("ПолноеИмя", "");
		ОписаниеАвтора.Вставить("Емайл", "");
		ОписаниеАвтора.Вставить("ПредставлениеАвтора", СокрЛП(МассивКлючей[1]));
		
		ДанныеАвторов.Добавить(ОписаниеАвтора);

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьАвторовJson(Текст)
	
	РезультатЧтения = ПрочитатьJSON(Текст);

	Если ТипЗнч(РезультатЧтения) = Тип("Массив") Тогда
		
		Результат = Новый Соответствие();
		Результат.Вставить("НаборАвторов", РезультатЧтения);
	
	Иначе
		
		Результат = РезультатЧтения;

	КонецЕсли;

	Конструктор = ПолучитьКонструкторПараметровАвторов();
	Конструктор.ИзСоответствия(Результат);

	НаборАвторовИзФайла = Конструктор.ВСтруктуру().НаборАвторов;

	Для каждого ЭлементНабора Из НаборАвторовИзФайла Цикл
		
		ОписаниеАвтора = Новый Структура();

		ОписаниеАвтора.Вставить("Автор", ЭлементНабора.Автор);
		ОписаниеАвтора.Вставить("ПолноеИмя", ЭлементНабора.ПолноеИмя);
		ОписаниеАвтора.Вставить("Емайл", ЭлементНабора.Емайл);
		ОписаниеАвтора.Вставить("ПредставлениеАвтора", ЭлементНабора.ПредставлениеАвтора);
		
		ДанныеАвторов.Добавить(ОписаниеАвтора);

	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьДанныеАвторовИзURL(URLПолученияФайла)
	
	Аутентификация = Новый Структура("Пользователь, Пароль", ПользовательURL, ПарольПользовательURL);

	Ответ = КоннекторHTTP.Get("URLПолученияФайла",
				, Новый Структура("Аутентификация", Аутентификация));

	КодСостояния = Ответ.КодСостояния;

	Если КодСостояния <> 200 Тогда
		// Лог.Кри
		Возврат; // TODO: Надо ругнуться
	КонецЕсли;

	ТекстФайла = Ответ.Текст();
	
	ПрочитатьДанныеАвторов(ТекстФайла)

КонецПроцедуры

Процедура ЗаполнитьТаблицуАвторов(ТаблицаАвторов)
	
	Для каждого ОписаниеАвтора Из ДанныеАвторов Цикл
		
		Отбор = Новый Структура("Автор", ОписаниеАвтора.Автор);
		МассивСтрок = ТаблицаАвторов.НайтиСтроки(Отбор);

		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаАвторов.Добавить();
			НоваяСтрока.Автор = ОписаниеАвтора.Автор;
			НоваяСтрока.ПредставлениеАвтора = ПолучитьПредставлениеАвтора(ОписаниеАвтора);
		Иначе

			Если ПриоритетЗаполнения = ПеречислениеПриоритетЗаполнения.ОбщиеАвторы Тогда
				СтрокаАвтора = МассивСтрок[0];
				СтрокаАвтора.Автор = ОписаниеАвтора.Автор;
				СтрокаАвтора.ПредставлениеАвтора = ПолучитьПредставлениеАвтора(ОписаниеАвтора);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПредставлениеАвтора(ОписаниеАвтора)
	
	Если Не ПустаяСтрока(ОписаниеАвтора.ПредставлениеАвтора) Тогда
		Возврат ОписаниеАвтора.ПредставлениеАвтора;
	Иначе

		Возврат СтрШаблон("%1 <%2>"
					, ?(ПустаяСтрока(ОписаниеАвтора.ПолноеИмя), ОписаниеАвтора.ПолноеИмя, ОписаниеАвтора.Автор)
					, ОписаниеАвтора.Емайл);

	КонецЕсли;

КонецФункции

Процедура ПриСозданииОбъекта()

	Лог = Логирование.ПолучитьЛог(ИмяЛога());
	КомандыПлагина = Новый Массив;
	КомандыПлагина.Добавить("sync");

	ПеречислениеПриоритетЗаполнения = Новый Структура();
	ПеречислениеПриоритетЗаполнения.Вставить("Проект", "project");
	ПеречислениеПриоритетЗаполнения.Вставить("ОбщиеАвторы", "shared");
	ПеречислениеПриоритетЗаполнения.Вставить("ТолькоОбщиеАвторы", "only");

	ПеречислениеТипыСодержания = Новый Структура();
	ПеречислениеТипыСодержания.Вставить("json", "json");
	ПеречислениеТипыСодержания.Вставить("Текст", "text");
	ПеречислениеТипыСодержания.Вставить("АвтоматическоеОпределение", "auto");
	
	ДанныеАвторов = Новый Массив();
	
КонецПроцедуры


